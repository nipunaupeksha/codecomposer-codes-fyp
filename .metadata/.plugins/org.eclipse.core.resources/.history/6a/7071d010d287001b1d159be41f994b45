#include "stdio.h"
#include <math.h> /*Definitions for math library*/

#define PI 3.1415926535897

float* hanning_window(int frame_length);

void coherence(int fs, int frameLength, float shift){
	
	float lambda_x=0.68;   /*Forgetting factor for smoothing power spectrum*/ 
	float epsilon=10^-12;
	float *window;
	
	fs = 16000; /*16 kHz sampling rate*/  /*TODO-->should be coming first I guess*/
	frameLength = floor(20 * fs/ 1000); /*Frame length*/
	
	/*If integer division of frameLength/2 is not equal to float division with floor function then add 1 to frameLength*/
	if(frameLength/2 != floor(frameLength/2)){ 
		frameLength = frameLength + 1;
	}
	
	shift = floor(frameLength * 0.25);
	window = hanning_window(frameLength);	
	//float window[frameLength] = {0};
	//hanning_window(window,frameLength);
}

float* hanning_window(int frame_length){
	float* window = malloc(sizeof(float)*frame_length);
	int i=0;
	for(i=0; i<frame_length; i++){
		float term = i/(float)(frame_length-1);
		window[i] = 0.5 * (1 - cos((2*PI)*term));
	}
	return window;
}


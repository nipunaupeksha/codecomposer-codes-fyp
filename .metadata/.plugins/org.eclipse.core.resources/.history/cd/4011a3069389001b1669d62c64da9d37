#include "conf.h" /*Definition of complex variable structure*/
#include "stdlib.h"
#include "string.h"
#include <math.h> /*Definitions of math library*/

#define PI 3.14159265358979323846264338327950288
#define clipThresholdFactor 0.5
#define lowerLagMS 2.5
#define upperLagMS 5

/************************************************
 *   Implementation of Hann function in MATLAB
 * *********************************************/
float* hanning(Int32 N){
	Int32 i;
	float* w = (float*)malloc(sizeof(float) * N);
	memset(w, 0, N*sizeof(float));
	for(i = 0; i<N; i++){
		w[i] = 0.5 * (1 - cos(2 * PI * i/(float)(N-1)));
	}
	return w;
}

/************************************************
*    Implementation of Zeors function in MATLAB
*    1D Vector
************************************************/
float* zeros(Int32 N){
	float* z = (float*) malloc(N * sizeof(float));
	memset(z, 0, N*sizeof(float));
	return z;
}

/************************************************
*    Implementation of Ones function in MATLAB
*    1D Vector
************************************************/
float* ones(Int32 N){
	float* o = (float*) malloc(N * sizeof(float));
	memset(o, 1, N*sizeof(float));
	return o;
}

/*************************************************
*    Implementatiion of nextpow2 function in
*    MATLAB
*************************************************/

Int32 nextpow2(Int32 n){
	Int16 nextPow;
	n = abs(n);
	nextPow = ceil(log2(n));	
	return nextPow;
}

/*************************************************
 *    Implementation of flipup function in 
 *    MATLAB
 ************************************************/
 float* flipud(float* arr){
 	/*arr->an array*/
 	Int32 i; //Iteration
 	/* length of array
 	 * *(&arr + 1) - arr;
 	 * sizeof(arr)/sizeof(arr[0]) 
 	 */
 	Int32 N = *(&arr + 1) - arr;
 	float *f =(float*) malloc(N * sizeof(float));
 	memset(f, 0, N*sizeof(float));
 	for(i=N-1;i>=0;i--){
 		f[N-1-i] = arr[i];
 	}
 	return f;
 }

/*************************************************
*    Implementation of min function
*************************************************/
double min(double n1, double n2){
	return n1 <= n2 ? n1 : n2;
}

/************************************************
*    Implementation of max function
************************************************/
double max(double n1,double n2){
	return n1>=n2 ? n1 : n2;
}

/*************************************************
 *   Periodicity Function -> Peak Periodicity
 ************************************************/
 void peakPeriodicity(Int32* input, Int32 fs){
 	Int32 i; //Iterator
 	Int32 duration;//length of input signal
 	float clipThreshold; float lowerLag; float upperLag;
 	float* output; float* acf;float* hVector;float* lagArray;
 	float maxValue=0;
 	
 	duration = *(&input)-input;
 	
 	for(i=0;i<duration;i++){
 		maxValue = (float)max(maxValue,input[i]);
 	}
 	
 	clipThreshold = clipThresholdFactor * maxValue;
 	output = zeros(duration);
	
	for(i=0;i<duration;i++){
		if(input[i]>=clipThreshold){
			output[i] = input[i] - clipThreshold;
		}else if(abs(input[i])<clipThreshold){
			output[i]= 0;
		}else if(input[i]<-clipThreshold){
			output[i] = input[i]+clipThreshold;
		}
	} 	
 	
 	//TODO acf = xcorr(output)
 	lowerLag = (float)round((lowerLagMS * fs)/(float)1000);
 	upperLag = (float)round((upperLagMS * fs)/(float)1000);
 	//TODO acfSectionalized = acf(duration+lowerLag:duration+upperLag)
 	for(i=0;i<upperLag-lowerLag+1;i++){
 		hVector[i] = lowerLag+i;
 	}
 	for(i=0;i<upperLag-lowerLag+1;i++){
 		lagArray[i] = 1 - hVector[i];
 	}
 	//TODO acfNormalized = acfSectionalized ./ lagArray;

	//TODO energyNormalized = acf(duration)/duration;

	//TODO finalacf = acfNormalized / energyNormalized;

	//TODO peakPeriodicity = max(finalacf);
 	
 }

/*************************************************
*    Voice Activity Detector
*************************************************/
/*
void voice_activity_detector(Int32* x, Int32 fs){
	Int32 i; //Iterator
	float* vadMarker; float* outputSignal; float* additionalArray;
	float* inputSignal;
	Int32 frameLength; Int32 frameLengthSamples; Int32 numFrames; Int32 signalLength;
	Int32 additionalSamples;
	
	
	signalLength = *(&x+1)-x;
	
	frameLength = 10;
	frameLengthSamples = (Int32)ceil(frameLength*fs/(float)1000);
	numFrames = (Int32)ceil(signalLength/(float)frameLengthSamples);
	additionalSamples = (frameLengthSamples*numFrames - signalLength);
	additionalArray = zeros(additionalSamples);
	for(i=0;i<signalLength;i++){
		
	} //TODO line 16/17
	
}*/

/***************************************************
 *  Implementation of xcorr function in MATALAB
***************************************************/
int min(int a, int b) { //method overloading
    return (a <= b) ? a : b;
}

int max(int a, int b) {//method overloading
    return (a >= b) ? a : b;
}

void xcorr(float *tr1, float *tr2, double *corp, int shift, int shift_zero,
        int window, int demean, int normalize, int ndat1,
        int ndat2, int ndat1d, int ndat2d)
/*
Calculates the cross-correlation function of data arrays tr1 and tr2. We use
the following definition of cross-correlation:
corp[i] = sum_j(tr1[i+j]*tr2[j])
The data is demeaned before. The result is normalized.
input:
tr1, tr2:   data arrays with length ndat1, ndat2
shift:      maximal shift
shift_zero: before cross-correlation the first data array is right-shifted
            by that amount of samples
            (The effect is a right-shift of the correlation function.
            In the formula above tr1[i+j] is substituted by tr1[i+j-shift_zero])
demean:     0 or 1. if 1 the data is demeand
normalize:  0 or 1. if 1 the cross-correlation function is normalized
            (correlation coefficient of 1 than means perfect fit)
window:     only use values in this window for demeaning and normalization
            if 0: window = min(ndat1, ndat2)
            if >0: window = this paramter
ndat1, ndat2: length of data arrays
ndat1d, ndat2d: use this length for demeaning (see source code)
            (if 0 ndat1d = ndat2 = window)
output:
corp: cross-correlation function of length 2*shift+1
 */ {
    int a, a2, b, b2, bmin, bmax, flag = 0, ind1, ind2, ind3, ind4;
    double sum, sum1, sum2, cmax;
    float *tra1, *tra2;

    tra1 = (float *) calloc(ndat1, sizeof (float));
    if (tra1 == NULL) {
        fprintf(stderr, "\nMemory allocation error!\n");
        exit(0);
    }
    tra2 = (float *) calloc(ndat2, sizeof (float));
    if (tra2 == NULL) {
        fprintf(stderr, "\nMemory allocation error!\n");
        exit(0);
    }

    /* Set standard values */
    if (window == 0) {
        window = min(ndat1, ndat2);
    }
    if (ndat1d == 0) {
        ndat1d = window;
    }
    if (ndat2d == 0) {
        ndat2d = window;
    }

    ind1 = max(0, (ndat1 - window) / 2);
    ind2 = min(ndat1, (ndat1 + window) / 2);
    ind3 = max(0, (ndat2 - window) / 2);
    ind4 = min(ndat2, (ndat2 + window) / 2);

    /* Demean data (Zero offset) */
    if (demean > 0) {
        sum = 0;
        for (a = ind1; a < ind2; a++) {
            sum += tr1[a];
        }
        sum /= ndat1d;
        for (a = 0; a < ndat1; a++) {
            tra1[a] = tr1[a] - (float) sum;
        }
        if (sum == 0.0)
            flag = 1;
        sum = 0;
        for (a = ind3; a < ind4; a++) {
            sum += tr2[a];
        }
        sum /= ndat2d;
        for (a = 0; a < ndat2; a++) {
            tra2[a] = tr2[a] - (float) sum;
        }
        if (sum == 0.0)
            flag += 1;
    } else {
        for (a = 0; a < ndat1; a++) {
            tra1[a] = tr1[a];
        }
        for (a = 0; a < ndat2; a++) {
            tra2[a] = tr2[a];
        }
    }

    /* Normalizing the traces  (max amp = 1) */
    /*if (normalize > 0) {
        cmax = 0;
        for (a = 0; a < ndat1; a++) {
            if (fabs(tra1[a]) > cmax) {
                cmax = fabs(tra1[a]);
            }
        }
        for (a = 0; a < ndat1; a++) {
            tra1[a] = tra1[a] / (float) cmax;
        }
        cmax = 0;
        for (a = 0; a < ndat2; a++) {
            if (fabs(tra2[a]) > cmax) {
                cmax = fabs(tra2[a]);
            }
        }
        for (a = 0; a < ndat2; a++) {
            tra2[a] = tra2[a] / (float) cmax;
        }
    }*/

    /* xcorr ... */
    //printf("%d\n", flag);
    //printf("NEW%d\n", 0);
    //printf("%d %d %d %d\n", ndat1, ndat2, shift, window);
    //printf("%d\n", 0);
    if (flag == 0) {
        a = 0;
        a2 = -shift_zero - shift;
        if (ndat1 != ndat2) {
            for (; a < (2 * shift + 1); a++, a2++) {
                bmin = max(0, -a2 + (ndat2 - ndat1) / 2);
                bmax = min(ndat2, -a2 + (ndat1 + ndat2) / 2);
                b2 = bmin;
                b = b2 + (ndat1 - ndat2) / 2;
                corp[a] = 0;
                //printf("%d - %d %d - %d %d\n", a2, b + a2, b + a2 + bmax - bmin, b2, bmax);
                if (bmin >= bmax) {
                    continue;
                }
                for (; b2 < bmax; b++, b2++) {
                    corp[a] += tra1[b + a2] * tra2[b2];
                }
            }
        } else { // same as above only ndat2 = ndat1, we need one variable less in the second loop
            for (; a < (2 * shift + 1); a++, a2++) {
                bmin = max(0, -a2);
                bmax = min(ndat1, -a2 + ndat1);
                corp[a] = 0;
                if (bmin >= bmax) {
                    continue;
                }
                for (b = bmin; b < bmax; b++) {
                    corp[a] += tra1[b + a2] * tra2[b];
                }
            }
        }

        /* normalize xcorr function */
        if (normalize > 0) {
            sum1 = sum2 = 0.0;
            for (a = ind1; a < ind2; a++) {
                sum1 += (*(tra1 + a))*(*(tra1 + a));
            }
            for (a = ind3; a < ind4; a++) {
                sum2 += (*(tra2 + a))*(*(tra2 + a));
            }
            sum1 = sqrt(sum1);
            sum2 = sqrt(sum2);
            cmax = 1 / (sum1 * sum2);
            for (a = 0; a < (2 * shift + 1); a++) {
                corp[a] *= cmax;
            }
        }
        /*
        // Find maximum correlation coefficient and shift
        cmax = 0;
        shift_max = 1;
        for (a=0;a<(2*shift+1);a++)
        {
            if (fabs(corp[a]) > cmax)
            {
                cmax = fabs(corp[a]);
                shift_max = a;
            }
        }
        corp_max = corp[shift_max];
        shift_max = shift_max - shift - 1;
         */
    } else {
        for (a = 0; a < (2 * shift + 1); a++) {
            corp[a] = 0;
            //shift_max = 0;
            //corp_max = 0;
        }
    }
    free((char *) tra1);
    free((char *) tra2);
}